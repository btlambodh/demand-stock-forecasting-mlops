[tool:pytest]
# =============================================================================
# Pytest Configuration for Demand Stock Forecasting MLOps
# Enhanced configuration for unit and integration testing
# =============================================================================

# Minimum pytest version
minversion = 6.0

# Test discovery paths
testpaths = tests

# Test file patterns
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# =============================================================================
# Test Markers - Enhanced Organization
# =============================================================================
markers =
    # Test Categories
    unit: Unit tests for individual components (fast, isolated)
    integration: Integration tests for component interactions (medium speed)
    e2e: End-to-end workflow tests (slow, comprehensive)
    
    # Component-Specific Tests
    data: Data processing and validation tests
    training: Model training and evaluation tests
    deployment: Deployment and infrastructure tests
    monitoring: Monitoring and observability tests
    api: API endpoint and service tests
    
    # Infrastructure and External Services
    aws: Tests that interact with AWS services (mocked or real)
    sagemaker: SageMaker-specific functionality tests
    s3: S3 storage and data pipeline tests
    athena: Athena query and analytics tests
    
    # Performance and Scale
    slow: Tests that take longer than 30 seconds
    fast: Tests that complete in under 5 seconds
    performance: Performance and load testing
    
    # Environment-Specific
    local: Tests for local development environment
    ci: Tests optimized for CI/CD environments
    docker: Tests requiring Docker containers
    
    # Special Categories
    security: Security and vulnerability tests
    regression: Regression tests for known issues
    experimental: Experimental or unstable tests

# =============================================================================
# Command Line Options - Enhanced for CI/CD
# =============================================================================
addopts = 
    # Output formatting
    -ra
    --strict-markers
    --strict-config
    --tb=short
    --color=yes
    
    # Coverage configuration
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:reports/htmlcov
    --cov-report=xml:reports/coverage.xml
    --cov-report=json:reports/coverage.json
    --cov-fail-under=70
    --cov-branch
    
    # Performance and debugging
    --durations=10
    --durations-min=1.0
    --maxfail=3
    
    # Warnings and cleanup
    -p no:warnings
    --disable-warnings
    
    # Parallel execution (uncomment if pytest-xdist is installed)
    # -n auto
    # --dist=worksteal

# =============================================================================
# Timeouts and Performance
# =============================================================================
# Global timeout for all tests (5 minutes)
timeout = 300

# Timeout method (thread-based for better compatibility)
timeout_method = thread

# Cache configuration
cache_dir = .pytest_cache

# =============================================================================
# Logging Configuration - Enhanced
# =============================================================================
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture configuration
log_capture = true
log_level = INFO

# Live logging during test execution
log_auto_indent = true

# =============================================================================
# Coverage Configuration - Detailed
# =============================================================================
# Additional coverage options
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.pytest_cache/*
    */build/*
    */dist/*
    setup.py
    conftest.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

# Coverage reporting precision
precision = 2

# Show missing lines in terminal report
show_missing = true

# Skip files with 100% coverage in terminal report
skip_covered = false

# Sort report by coverage percentage
sort = Cover

[coverage:html]
directory = reports/htmlcov

[coverage:xml]
output = reports/coverage.xml

[coverage:json]
output = reports/coverage.json

# =============================================================================
# JUnit XML Configuration (for CI/CD)
# =============================================================================
junit_suite_name = MLOps_Test_Suite
junit_logging = all
junit_log_passing_tests = true
junit_duration_report = total

# =============================================================================
# Filter Configurations for Different Environments
# =============================================================================

# Example usage:
# pytest -m "unit and not slow"                    # Fast unit tests only
# pytest -m "integration and data"                 # Data integration tests
# pytest -m "not (slow or aws)"                    # Skip slow and AWS tests
# pytest -m "api or deployment"                    # API and deployment tests
# pytest tests/unit/ -m "fast"                     # Fast unit tests
# pytest tests/integration/ -m "not slow"          # Integration tests (no slow ones)
# pytest tests/integration/test_e2e.py -m "e2e"    # End-to-end tests only

# CI-friendly test execution:
# pytest -m "not slow" --maxfail=1 --tb=line      # CI quick tests
# pytest -m "unit" --cov-fail-under=80            # Unit tests with high coverage
# pytest -m "integration and not aws"             # Integration without AWS

# =============================================================================
# Development vs CI Configuration
# =============================================================================

# For local development, you can create pytest-dev.ini:
# [tool:pytest]
# addopts = -v --tb=long --no-cov --durations=0 -x
# markers = ... (same as above)

# For CI, use this file with additional options:
# pytest --cov-fail-under=80 --junitxml=reports/junit.xml -m "not slow"